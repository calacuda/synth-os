[package]
name = "synth-backend"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
actix-files = { version = "0.6", optional = true }
actix-web = { version = "4", optional = true, features = ["macros"] }
console_error_panic_hook = "0.1"
http = { version = "1.3.1", optional = true }
leptos = { version = "0.8.2", features = ["nightly"] }
leptos_meta = { version = "0.8.2" }
leptos_actix = { version = "0.8.2", optional = true }
leptos_router = { version = "0.8.2", features = ["nightly"] }
wasm-bindgen = "0.2"
stepper-synth-backend = { package = "stepper-synth" , git = "https://github.com/calacuda/stepper-synth", branch = "feature", version = "0.1.0", default-features = false, optional = true, features = [ "midir", "tinyaudio", "fern" ] }
# leptos_server_signal = "0.8.0"
actix-ws = { version = "0.3", optional = true }
leptos_sse = { version = "0.4.0" }
actix-web-lab = { version = "0.24.1", optional = true }
tokio = { version = "1.45.0", optional = true }
bincode = { version = "2.0.1", features = ["serde"] }
base64 = "0.22.1"
leptos-use = "0.15.7"
codee = "0.3.0"
reqwest = "0.12.15"
midir = "0.10.1"
midi-control = "0.2.2"
tinyaudio = "1.1.0"
anyhow = "1.0.98"
log = { version = "0.4.27", features = ["max_level_info", "release_max_level_info"] }
serde = { version = "1.0.219", features = ["derive"] }
# leptos_server_signal = { git = "https://github.com/tqwewe/leptos_server_signal", version = "0.8.0" }

[features]
# csr = ["leptos/csr"]
hydrate = ["leptos/hydrate",  "dep:stepper-synth-backend"]
ssr = [
  "dep:stepper-synth-backend",
  "dep:actix-files",
  "dep:actix-web",
  "dep:actix-web-lab",
  "dep:actix-ws",
  "dep:leptos_actix",
  "dep:actix-ws",
  "dep:tokio",
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
  # "leptos_server_signal/ssr",
  # "leptos_server_signal/actix",
  "leptos_sse/ssr",
  "leptos_sse/actix",
  "leptos-use/ssr",
  "leptos-use/actix",
]
default = ["ssr", "hydrate"]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "synth-backend"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"
# The tailwind input file.
#
# Optional, Activates the tailwind build
tailwind-input-file = "input.css"
# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
# style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "assets"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
# site-addr = "127.0.0.1:3000"
site-addr = "0.0.0.0:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
